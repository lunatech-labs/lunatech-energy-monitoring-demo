akka {

    actor {
        provider = "cluster"

        serialization-bindings {
            "com.lunatech.energy.demo.JsonSerializable" = jackson-json
        }
    }

    cluster {
        downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
        shutdown-after-unsuccessful-join-seed-nodes = 60s
        split-brain-resolver.active-strategy = "keep-oldest"
    }

    coordinated-shutdown.exit-jvm = on

    persistence {
        journal.plugin = "jdbc-journal"
        snapshot-store.plugin = "jdbc-snapshot-store"
    }

    remote.artery.canonical {
        hostname = "127.0.0.1"
        port = 2550
    }

    serialization.jackson {
      jackson-modules += "akka.serialization.jackson.AkkaJacksonModule"
      jackson-modules += "akka.serialization.jackson.AkkaTypedJacksonModule"
      jackson-modules += "akka.serialization.jackson.AkkaStreamJacksonModule"
      jackson-modules += "com.fasterxml.jackson.module.paramnames.ParameterNamesModule"
      jackson-modules += "com.fasterxml.jackson.datatype.jdk8.Jdk8Module"
      jackson-modules += "com.fasterxml.jackson.datatype.jsr310.JavaTimeModule"
      jackson-modules += "com.fasterxml.jackson.module.scala.DefaultScalaModule"
      jackson-modules += "com.lunatech.energy.demo.serialization.jackson.JacksonModule"
    }
}

  # JDBC/Slick specific config

jdbc-journal {
  use-shared-db = "slick"
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  use-shared-db = "slick"
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  use-shared-db = "slick"
}

akka-persistence-jdbc {
  shared-databases {
    slick = ${slick}
  }
}

slick {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    name = "digital_twins"
    name = ${?POSTGRES_DB}
    host = "192.168.1.100"
    host = ${?POSTGRES_HOST}
    port = 5432
    port = ${?POSTGRES_PORT}
    url = "jdbc:postgresql://"${slick.db.host}":"${slick.db.port}"/"${slick.db.name}"?reWriteBatchedInserts=true"
    user = "digital_twins"
    user = ${?POSTGRES_USER}
    password = "v4U4GUjLXqmWV"
    password = ${?POSTGRES_PASSWORD}
    driver = "org.postgresql.Driver"
    numThreads = 5
    maxConnections = 5
    minConnections = 5
  }
}

akka.projection.jdbc {
  dialect = postgres-dialect
  blocking-jdbc-dispatcher {
    thread-pool-executor {
      fixed-pool-size = 5
    }
  }

  offset-store {
    # set this to your database schema if applicable, empty by default
    schema = ""
    # the database table name for the offset store
    table = "akka_projection_offset_store"
  }
}

cluster-status-indicator {

  led-brightness = 10
  led-count      = 10      // Number of LED pixels on LED strip
  led-pin        = 18      // GPIO pin connected to the pixels (must support PWM!)
  led-freq-hz    = 800000  // LED signal frequency in hertz (usually 800khz)
  led-dma        = 5       // DMA channel to use for generating signal (try 5)
  led-invert     = false   // True to invert the signal (when using NPN transistor level shift)
  led-channel    = 0

  cluster-leader-indicator-color = cyan
  cluster-heartbeat-indicator-color = whiteLow
  cluster-heartbeat-indicator-convergence-color = green
  cluster-heartbeat-indicator-no-convergence-color = red
  cluster-heartbeat-indicator-interval = 1000 millis
  cluster-heartbeat-indicator-convergence-interval = 150 millis
  cluster-weakly-up-indicator-interval = 130 millis

  cluster-node-colors {

    cluster-node-up-color          = green
    cluster-node-weakly-up-color   = mediumgreen
    cluster-node-down-color        = red
    cluster-node-left-color        = cyan
    cluster-node-exited-color      = magenta
    cluster-node-unreachable-color = whiteLow
    cluster-node-joined-color      = orange
    cluster-node-singleton-indicator-color   = lightblue
  }

  //led-strip-type = eight-led-reversed-order
  led-strip-type = ten-led-non-reversed-order
}

cluster-node-configuration {

  cluster-id = cluster-0

  seed-node-1 = node-1
  seed-node-2 = node-2
  seed-node-3 = node-3
  seed-node-4 = node-4

  cluster-node-to-led-mapping {

    cluster-0 {
      node-0  = 0
      node-1  = 1
      node-2  = 2
      node-3  = 3
      node-4  = 4
    }

    cluster-1 {
      node-5  = 0
      node-6  = 1
      node-7  = 2
      node-8  = 3
      node-9  = 4
    }

    cluster-2 {
      node-10  = 0
      node-11  = 1
      node-12  = 2
      node-13  = 3
      node-14  = 4
    }

    cluster-3 {
      node-15  = 0
      node-16  = 1
      node-17  = 2
      node-18  = 3
      node-19  = 4
    }

    cluster-4 {
      node-20  = 0
      node-21  = 1
      node-22  = 2
      node-23  = 3
      node-24  = 4
    }

    cluster-5 {
      node-25  = 0
      node-26  = 1
      node-27  = 2
      node-28  = 3
      node-29  = 4
    }

    cluster-6 {
      node-30  = 0
      node-31  = 1
      node-32  = 2
      node-33  = 3
      node-34  = 4
    }
  }
}
