//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: digital-twin.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `DigitalTwinServiceClient`, then call methods of this protocol to make API calls.
public protocol DigitalTwinServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: DigitalTwinServiceClientInterceptorFactoryProtocol? { get }

  func createMachine(
    _ request: CreateMachineRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<CreateMachineRequest, Empty>

  func changeMachineStatus(
    _ request: ChangeMachineStatusRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<ChangeMachineStatusRequest, Empty>

  func listenToMachineStatusChanges(
    _ request: Empty,
    callOptions: CallOptions?,
    handler: @escaping (MachineState) -> Void
  ) -> ServerStreamingCall<Empty, MachineState>
}

extension DigitalTwinServiceClientProtocol {
  public var serviceName: String {
    return "DigitalTwinService"
  }

  /// Unary call to CreateMachine
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateMachine.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func createMachine(
    _ request: CreateMachineRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<CreateMachineRequest, Empty> {
    return self.makeUnaryCall(
      path: DigitalTwinServiceClientMetadata.Methods.createMachine.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateMachineInterceptors() ?? []
    )
  }

  /// Unary call to ChangeMachineStatus
  ///
  /// - Parameters:
  ///   - request: Request to send to ChangeMachineStatus.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func changeMachineStatus(
    _ request: ChangeMachineStatusRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ChangeMachineStatusRequest, Empty> {
    return self.makeUnaryCall(
      path: DigitalTwinServiceClientMetadata.Methods.changeMachineStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeMachineStatusInterceptors() ?? []
    )
  }

  /// Server streaming call to ListenToMachineStatusChanges
  ///
  /// - Parameters:
  ///   - request: Request to send to ListenToMachineStatusChanges.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func listenToMachineStatusChanges(
    _ request: Empty,
    callOptions: CallOptions? = nil,
    handler: @escaping (MachineState) -> Void
  ) -> ServerStreamingCall<Empty, MachineState> {
    return self.makeServerStreamingCall(
      path: DigitalTwinServiceClientMetadata.Methods.listenToMachineStatusChanges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToMachineStatusChangesInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension DigitalTwinServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "DigitalTwinServiceNIOClient")
public final class DigitalTwinServiceClient: DigitalTwinServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: DigitalTwinServiceClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: DigitalTwinServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the DigitalTwinService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: DigitalTwinServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct DigitalTwinServiceNIOClient: DigitalTwinServiceClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: DigitalTwinServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the DigitalTwinService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: DigitalTwinServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol DigitalTwinServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: DigitalTwinServiceClientInterceptorFactoryProtocol? { get }

  func makeCreateMachineCall(
    _ request: CreateMachineRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<CreateMachineRequest, Empty>

  func makeChangeMachineStatusCall(
    _ request: ChangeMachineStatusRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<ChangeMachineStatusRequest, Empty>

  func makeListenToMachineStatusChangesCall(
    _ request: Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Empty, MachineState>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension DigitalTwinServiceAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return DigitalTwinServiceClientMetadata.serviceDescriptor
  }

  public var interceptors: DigitalTwinServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeCreateMachineCall(
    _ request: CreateMachineRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<CreateMachineRequest, Empty> {
    return self.makeAsyncUnaryCall(
      path: DigitalTwinServiceClientMetadata.Methods.createMachine.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateMachineInterceptors() ?? []
    )
  }

  public func makeChangeMachineStatusCall(
    _ request: ChangeMachineStatusRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<ChangeMachineStatusRequest, Empty> {
    return self.makeAsyncUnaryCall(
      path: DigitalTwinServiceClientMetadata.Methods.changeMachineStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeMachineStatusInterceptors() ?? []
    )
  }

  public func makeListenToMachineStatusChangesCall(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Empty, MachineState> {
    return self.makeAsyncServerStreamingCall(
      path: DigitalTwinServiceClientMetadata.Methods.listenToMachineStatusChanges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToMachineStatusChangesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension DigitalTwinServiceAsyncClientProtocol {
  public func createMachine(
    _ request: CreateMachineRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Empty {
    return try await self.performAsyncUnaryCall(
      path: DigitalTwinServiceClientMetadata.Methods.createMachine.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateMachineInterceptors() ?? []
    )
  }

  public func changeMachineStatus(
    _ request: ChangeMachineStatusRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Empty {
    return try await self.performAsyncUnaryCall(
      path: DigitalTwinServiceClientMetadata.Methods.changeMachineStatus.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChangeMachineStatusInterceptors() ?? []
    )
  }

  public func listenToMachineStatusChanges(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<MachineState> {
    return self.performAsyncServerStreamingCall(
      path: DigitalTwinServiceClientMetadata.Methods.listenToMachineStatusChanges.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListenToMachineStatusChangesInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct DigitalTwinServiceAsyncClient: DigitalTwinServiceAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: DigitalTwinServiceClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: DigitalTwinServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol DigitalTwinServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createMachine'.
  func makeCreateMachineInterceptors() -> [ClientInterceptor<CreateMachineRequest, Empty>]

  /// - Returns: Interceptors to use when invoking 'changeMachineStatus'.
  func makeChangeMachineStatusInterceptors() -> [ClientInterceptor<ChangeMachineStatusRequest, Empty>]

  /// - Returns: Interceptors to use when invoking 'listenToMachineStatusChanges'.
  func makeListenToMachineStatusChangesInterceptors() -> [ClientInterceptor<Empty, MachineState>]
}

public enum DigitalTwinServiceClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DigitalTwinService",
    fullName: "DigitalTwinService",
    methods: [
      DigitalTwinServiceClientMetadata.Methods.createMachine,
      DigitalTwinServiceClientMetadata.Methods.changeMachineStatus,
      DigitalTwinServiceClientMetadata.Methods.listenToMachineStatusChanges,
    ]
  )

  public enum Methods {
    public static let createMachine = GRPCMethodDescriptor(
      name: "CreateMachine",
      path: "/DigitalTwinService/CreateMachine",
      type: GRPCCallType.unary
    )

    public static let changeMachineStatus = GRPCMethodDescriptor(
      name: "ChangeMachineStatus",
      path: "/DigitalTwinService/ChangeMachineStatus",
      type: GRPCCallType.unary
    )

    public static let listenToMachineStatusChanges = GRPCMethodDescriptor(
      name: "ListenToMachineStatusChanges",
      path: "/DigitalTwinService/ListenToMachineStatusChanges",
      type: GRPCCallType.serverStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol DigitalTwinServiceProvider: CallHandlerProvider {
  var interceptors: DigitalTwinServiceServerInterceptorFactoryProtocol? { get }

  func createMachine(request: CreateMachineRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Empty>

  func changeMachineStatus(request: ChangeMachineStatusRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Empty>

  func listenToMachineStatusChanges(request: Empty, context: StreamingResponseCallContext<MachineState>) -> EventLoopFuture<GRPCStatus>
}

extension DigitalTwinServiceProvider {
  public var serviceName: Substring {
    return DigitalTwinServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateMachine":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CreateMachineRequest>(),
        responseSerializer: ProtobufSerializer<Empty>(),
        interceptors: self.interceptors?.makeCreateMachineInterceptors() ?? [],
        userFunction: self.createMachine(request:context:)
      )

    case "ChangeMachineStatus":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ChangeMachineStatusRequest>(),
        responseSerializer: ProtobufSerializer<Empty>(),
        interceptors: self.interceptors?.makeChangeMachineStatusInterceptors() ?? [],
        userFunction: self.changeMachineStatus(request:context:)
      )

    case "ListenToMachineStatusChanges":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Empty>(),
        responseSerializer: ProtobufSerializer<MachineState>(),
        interceptors: self.interceptors?.makeListenToMachineStatusChangesInterceptors() ?? [],
        userFunction: self.listenToMachineStatusChanges(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol DigitalTwinServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: DigitalTwinServiceServerInterceptorFactoryProtocol? { get }

  @Sendable func createMachine(
    request: CreateMachineRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Empty

  @Sendable func changeMachineStatus(
    request: ChangeMachineStatusRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Empty

  @Sendable func listenToMachineStatusChanges(
    request: Empty,
    responseStream: GRPCAsyncResponseStreamWriter<MachineState>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension DigitalTwinServiceAsyncProvider {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return DigitalTwinServiceServerMetadata.serviceDescriptor
  }

  public var serviceName: Substring {
    return DigitalTwinServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  public var interceptors: DigitalTwinServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  public func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateMachine":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<CreateMachineRequest>(),
        responseSerializer: ProtobufSerializer<Empty>(),
        interceptors: self.interceptors?.makeCreateMachineInterceptors() ?? [],
        wrapping: self.createMachine(request:context:)
      )

    case "ChangeMachineStatus":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<ChangeMachineStatusRequest>(),
        responseSerializer: ProtobufSerializer<Empty>(),
        interceptors: self.interceptors?.makeChangeMachineStatusInterceptors() ?? [],
        wrapping: self.changeMachineStatus(request:context:)
      )

    case "ListenToMachineStatusChanges":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Empty>(),
        responseSerializer: ProtobufSerializer<MachineState>(),
        interceptors: self.interceptors?.makeListenToMachineStatusChangesInterceptors() ?? [],
        wrapping: self.listenToMachineStatusChanges(request:responseStream:context:)
      )

    default:
      return nil
    }
  }
}

public protocol DigitalTwinServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'createMachine'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateMachineInterceptors() -> [ServerInterceptor<CreateMachineRequest, Empty>]

  /// - Returns: Interceptors to use when handling 'changeMachineStatus'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChangeMachineStatusInterceptors() -> [ServerInterceptor<ChangeMachineStatusRequest, Empty>]

  /// - Returns: Interceptors to use when handling 'listenToMachineStatusChanges'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListenToMachineStatusChangesInterceptors() -> [ServerInterceptor<Empty, MachineState>]
}

public enum DigitalTwinServiceServerMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DigitalTwinService",
    fullName: "DigitalTwinService",
    methods: [
      DigitalTwinServiceServerMetadata.Methods.createMachine,
      DigitalTwinServiceServerMetadata.Methods.changeMachineStatus,
      DigitalTwinServiceServerMetadata.Methods.listenToMachineStatusChanges,
    ]
  )

  public enum Methods {
    public static let createMachine = GRPCMethodDescriptor(
      name: "CreateMachine",
      path: "/DigitalTwinService/CreateMachine",
      type: GRPCCallType.unary
    )

    public static let changeMachineStatus = GRPCMethodDescriptor(
      name: "ChangeMachineStatus",
      path: "/DigitalTwinService/ChangeMachineStatus",
      type: GRPCCallType.unary
    )

    public static let listenToMachineStatusChanges = GRPCMethodDescriptor(
      name: "ListenToMachineStatusChanges",
      path: "/DigitalTwinService/ListenToMachineStatusChanges",
      type: GRPCCallType.serverStreaming
    )
  }
}
